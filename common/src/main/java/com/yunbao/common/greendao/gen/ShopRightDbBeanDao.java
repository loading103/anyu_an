package com.yunbao.common.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yunbao.common.greendao.entity.ShopRightDbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_RIGHT_DB_BEAN".
*/
public class ShopRightDbBeanDao extends AbstractDao<ShopRightDbBean, Long> {

    public static final String TABLENAME = "SHOP_RIGHT_DB_BEAN";

    /**
     * Properties of entity ShopRightDbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Branch_id = new Property(1, String.class, "branch_id", false, "BRANCH_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property Show_style = new Property(5, String.class, "show_style", false, "SHOW_STYLE");
        public final static Property Jump_url = new Property(6, String.class, "jump_url", false, "JUMP_URL");
        public final static Property Jump_type = new Property(7, String.class, "jump_type", false, "JUMP_TYPE");
        public final static Property Choosed = new Property(8, boolean.class, "choosed", false, "CHOOSED");
        public final static Property Is_king = new Property(9, String.class, "is_king", false, "IS_KING");
        public final static Property Parent_id = new Property(10, String.class, "parent_id", false, "PARENT_ID");
        public final static Property UserId = new Property(11, String.class, "userId", false, "USER_ID");
        public final static Property ClickTime = new Property(12, long.class, "clickTime", false, "CLICK_TIME");
        public final static Property Slide_show_type_button = new Property(13, int.class, "slide_show_type_button", false, "SLIDE_SHOW_TYPE_BUTTON");
    }


    public ShopRightDbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShopRightDbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_RIGHT_DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BRANCH_ID\" TEXT," + // 1: branch_id
                "\"ID\" TEXT," + // 2: id
                "\"NAME\" TEXT," + // 3: name
                "\"PIC\" TEXT," + // 4: pic
                "\"SHOW_STYLE\" TEXT," + // 5: show_style
                "\"JUMP_URL\" TEXT," + // 6: jump_url
                "\"JUMP_TYPE\" TEXT," + // 7: jump_type
                "\"CHOOSED\" INTEGER NOT NULL ," + // 8: choosed
                "\"IS_KING\" TEXT," + // 9: is_king
                "\"PARENT_ID\" TEXT," + // 10: parent_id
                "\"USER_ID\" TEXT," + // 11: userId
                "\"CLICK_TIME\" INTEGER NOT NULL ," + // 12: clickTime
                "\"SLIDE_SHOW_TYPE_BUTTON\" INTEGER NOT NULL );"); // 13: slide_show_type_button
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_RIGHT_DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopRightDbBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindString(2, branch_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String show_style = entity.getShow_style();
        if (show_style != null) {
            stmt.bindString(6, show_style);
        }
 
        String jump_url = entity.getJump_url();
        if (jump_url != null) {
            stmt.bindString(7, jump_url);
        }
 
        String jump_type = entity.getJump_type();
        if (jump_type != null) {
            stmt.bindString(8, jump_type);
        }
        stmt.bindLong(9, entity.getChoosed() ? 1L: 0L);
 
        String is_king = entity.getIs_king();
        if (is_king != null) {
            stmt.bindString(10, is_king);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(11, parent_id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(12, userId);
        }
        stmt.bindLong(13, entity.getClickTime());
        stmt.bindLong(14, entity.getSlide_show_type_button());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopRightDbBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindString(2, branch_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String show_style = entity.getShow_style();
        if (show_style != null) {
            stmt.bindString(6, show_style);
        }
 
        String jump_url = entity.getJump_url();
        if (jump_url != null) {
            stmt.bindString(7, jump_url);
        }
 
        String jump_type = entity.getJump_type();
        if (jump_type != null) {
            stmt.bindString(8, jump_type);
        }
        stmt.bindLong(9, entity.getChoosed() ? 1L: 0L);
 
        String is_king = entity.getIs_king();
        if (is_king != null) {
            stmt.bindString(10, is_king);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(11, parent_id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(12, userId);
        }
        stmt.bindLong(13, entity.getClickTime());
        stmt.bindLong(14, entity.getSlide_show_type_button());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShopRightDbBean readEntity(Cursor cursor, int offset) {
        ShopRightDbBean entity = new ShopRightDbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // branch_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // show_style
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jump_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // jump_type
            cursor.getShort(offset + 8) != 0, // choosed
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // is_king
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // parent_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userId
            cursor.getLong(offset + 12), // clickTime
            cursor.getInt(offset + 13) // slide_show_type_button
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopRightDbBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranch_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShow_style(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJump_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJump_type(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChoosed(cursor.getShort(offset + 8) != 0);
        entity.setIs_king(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setParent_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClickTime(cursor.getLong(offset + 12));
        entity.setSlide_show_type_button(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopRightDbBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopRightDbBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopRightDbBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
